class Solution:
    def nextPermutation(self, arr):
        n = len(arr)
        i = n - 2

        # Step 1: Find the pivot (first decreasing from right)
        while i >= 0 and arr[i] >= arr[i + 1]:
            i -= 1

        if i >= 0:
            # Step 2: Find rightmost successor to the pivot
            j = n - 1
            while arr[j] <= arr[i]:
                j -= 1
            # Step 3: Swap pivot with successor
            arr[i], arr[j] = arr[j], arr[i]

        # Step 4: Reverse the suffix
        left, right = i + 1, n - 1
        while left < right:
            arr[left], arr[right] = arr[right], arr[left]
            left += 1
            right -= 1




class Solution:
    def nextPermutation(self, nums):
        def swap(i, j):
            nums[i], nums[j] = nums[j], nums[i]

        def reverse(start):
            end = len(nums) - 1
            while start < end:
                swap(start, end)
                start += 1
                end -= 1

        n = len(nums)
        pivot = n - 2

        # Step 1: Find the first index where nums[i] < nums[i+1]
        while pivot >= 0 and nums[pivot] >= nums[pivot + 1]:
            pivot -= 1

        if pivot >= 0:
            # Step 2: Find the first number larger than nums[pivot] from the end
            successor = n - 1
            while nums[successor] <= nums[pivot]:
                successor -= 1
            swap(pivot, successor)

        # Step 3: Reverse the part after pivot
        reverse(pivot + 1)
